import 'dart:convert';

import 'package:flutter_test/flutter_test.dart';
import 'package:track_my_indoor_exercise/export/fit/fit_crc.dart';

class TestPair {
  final List<int> data;
  final bool pad;
  final int crc;

  TestPair({required this.data, required this.pad, required this.crc}) {
    if (pad) {
      data.addAll(utf8.encode(".FIT"));
    }
  }
}

void main() {
  group('FIT CRC low level test', () {
    for (final testPair in [
      TestPair(data: [0x0E, 0x20, 0x23, 0x08, 0xF1, 0x56, 0x00, 0x00], pad: true, crc: 0xADF2),
      TestPair(data: [0x0E, 0x10, 0xE9, 0x05, 0xB1, 0x00, 0x00, 0x00], pad: true, crc: 0x1442),
      TestPair(data: [0x0E, 0x10, 0x5E, 0x06, 0x17, 0x08, 0x00, 0x00], pad: true, crc: 0xBBE3),
      TestPair(data: [0x0E, 0x10, 0xE9, 0x05, 0xC5, 0x00, 0x00, 0x00], pad: true, crc: 0xC344),
      TestPair(data: [0x0E, 0x20, 0x68, 0x06, 0xA2, 0x00, 0x00, 0x00], pad: true, crc: 0xD0BE),
      TestPair(data: [0x0E, 0x10, 0x5E, 0x06, 0x86, 0x00, 0x00, 0x00], pad: true, crc: 0xDBA2),
      TestPair(data: [0x0E, 0x10, 0xE9, 0x05, 0x9F, 0x00, 0x00, 0x00], pad: true, crc: 0x80C1),
      TestPair(data: [0x0E, 0x20, 0x12, 0x08, 0x98, 0xAB, 0x03, 0x00], pad: true, crc: 0x2949),
      TestPair(data: [0x0E, 0x20, 0x12, 0x08, 0x33, 0x2D, 0x01, 0x00], pad: true, crc: 0xC8E4),
      TestPair(data: [0x0E, 0x20, 0x12, 0x08, 0xAC, 0x4D, 0x01, 0x00], pad: true, crc: 0xE2CD),
      TestPair(data: [0x0E, 0x20, 0x12, 0x08, 0x3E, 0x5E, 0x00, 0x00], pad: true, crc: 0x4766),
      TestPair(data: [0x0E, 0x20, 0x12, 0x08, 0x33, 0x2D, 0x01, 0x00], pad: true, crc: 0xC8E4),
      TestPair(data: [
        0x40,
        0x00,
        0x01,
        0x00,
        0x00,
        0x04,
        0x01,
        0x02,
        0x84,
        0x00,
        0x01,
        0x00,
        0x02,
        0x02,
        0x84,
        0x03,
        0x04,
        0x8c,
        0x00,
        0x00,
        0x0f,
        0x04,
        0x23,
        0x29,
        0x00,
        0x00,
        0x06,
        0xa5,
        0x40,
        0x00,
        0x01,
        0x00,
        0xcf,
        0x02,
        0x01,
        0x10,
        0x0d,
        0x03,
        0x01,
        0x02,
        0x00,
        0x01,
        0x01,
        0x02,
        0x03,
        0x05,
        0x08,
        0x0d,
        0x15,
        0x22,
        0x37,
        0x59,
        0x90,
        0xe9,
        0x79,
        0x62,
        0xdb,
        0x00,
        0x40,
        0x00,
        0x01,
        0x00,
        0xce,
        0x05,
        0x00,
        0x01,
        0x02,
        0x01,
        0x01,
        0x02,
        0x02,
        0x01,
        0x02,
        0x03,
        0x11,
        0x07,
        0x08,
        0x0a,
        0x07,
        0x00,
        0x00,
        0x00,
        0x01,
        0x64,
        0x6f,
        0x75,
        0x67,
        0x68,
        0x6e,
        0x75,
        0x74,
        0x73,
        0x5f,
        0x65,
        0x61,
        0x72,
        0x6e,
        0x65,
        0x64,
        0x00,
        0x64,
        0x6f,
        0x75,
        0x67,
        0x68,
        0x6e,
        0x75,
        0x74,
        0x73,
        0x00,
        0x60,
        0x00,
        0x01,
        0x00,
        0x14,
        0x04,
        0x03,
        0x01,
        0x02,
        0x04,
        0x01,
        0x02,
        0x05,
        0x04,
        0x86,
        0x06,
        0x02,
        0x84,
        0x01,
        0x00,
        0x01,
        0x00,
        0x00,
        0x8c,
        0x58,
        0x00,
        0x00,
        0xc7,
        0x38,
        0xb9,
        0x80,
        0x01,
        0x00,
        0x8f,
        0x5a,
        0x00,
        0x03,
        0x2c,
        0x80,
        0x8e,
        0x40,
        0x02,
        0x00,
        0x90,
        0x5c,
        0x00,
        0x05,
        0xa9,
        0x38,
        0x8a,
        0x10,
        0x03
      ], pad: false, crc: 0x9ed3),
    ]) {
      final sum = testPair.data.fold<int>(0, (a, b) => a + b);
      test("$sum -> ${testPair.crc}", () async {
        expect(crcData(testPair.data), testPair.crc);
      });
    }
  });
}
